package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
)

type MenuItem struct {
    Name  string
    Price float64
}

type CafeMenu map[string]*MenuItem

// H√†m th√™m m√≥n m·ªõi
func AddItem(menu *CafeMenu, id string, name string, price float64) {
    (*menu)[id] = &MenuItem{Name: name, Price: price}
    fmt.Println("‚úÖ ƒê√£ th√™m m√≥n:", name)
}

// H√†m hi·ªÉn th·ªã menu
func DisplayMenu(menu *CafeMenu) {
    fmt.Println("\nüìã MENU:")
    for id, item := range *menu {
        fmt.Printf("ID: %s | %s - %.0fƒë\n", id, item.Name, item.Price)
    }
    fmt.Println()
}

// H√†m c·∫≠p nh·∫≠t m√≥n
func UpdateItem(menu *CafeMenu, id string, newName string, newPrice float64) {
    if item, exists := (*menu)[id]; exists {
        item.Name = newName
        item.Price = newPrice
        fmt.Println("‚úÖ ƒê√£ c·∫≠p nh·∫≠t m√≥n", id)
    } else {
        fmt.Println("‚ùå Kh√¥ng t√¨m th·∫•y m√≥n v·ªõi ID:", id)
    }
}

// H√†m x√≥a m√≥n
func DeleteItem(menu *CafeMenu, id string) {
    if _, exists := (*menu)[id]; exists {
        delete(*menu, id)
        fmt.Println("üóëÔ∏è ƒê√£ x√≥a m√≥n c√≥ ID:", id)
    } else {
        fmt.Println("‚ùå Kh√¥ng t√¨m th·∫•y m√≥n v·ªõi ID:", id)
    }
}

// H√†m ƒëi·ªÅu khi·ªÉn CLI
func main() {
    menu := make(CafeMenu)
    scanner := bufio.NewScanner(os.Stdin)

    for {
        fmt.Println("---- Qu·∫£n l√Ω Qu√°n C√† Ph√™ ----")
        fmt.Println("1. Th√™m m√≥n")
        fmt.Println("2. Hi·ªÉn th·ªã menu")
        fmt.Println("3. C·∫≠p nh·∫≠t m√≥n")
        fmt.Println("4. X√≥a m√≥n")
        fmt.Println("5. Tho√°t")
        fmt.Print("Ch·ªçn ch·ª©c nƒÉng: ")
        scanner.Scan()
        choice := scanner.Text()

        switch choice {
        case "1":
            fmt.Print("Nh·∫≠p ID m√≥n: ")
            scanner.Scan()
            id := scanner.Text()

            fmt.Print("T√™n m√≥n: ")
            scanner.Scan()
            name := scanner.Text()

            fmt.Print("Gi√°: ")
            scanner.Scan()
            priceStr := scanner.Text()
            price, err := strconv.ParseFloat(priceStr, 64)
            if err != nil {
                fmt.Println("‚ùå Gi√° kh√¥ng h·ª£p l·ªá.")
                continue
            }

            AddItem(&menu, id, name, price)

        case "2":
            DisplayMenu(&menu)

        case "3":
            fmt.Print("Nh·∫≠p ID m√≥n c·∫ßn c·∫≠p nh·∫≠t: ")
            scanner.Scan()
            id := scanner.Text()

            fmt.Print("T√™n m·ªõi: ")
            scanner.Scan()
            newName := scanner.Text()

            fmt.Print("Gi√° m·ªõi: ")
            scanner.Scan()
            newPriceStr := scanner.Text()
            newPrice, err := strconv.ParseFloat(strings.TrimSpace(newPriceStr), 64)
            if err != nil {
                fmt.Println("‚ùå Gi√° kh√¥ng h·ª£p l·ªá.")
                continue
            }

            UpdateItem(&menu, id, newName, newPrice)

        case "4":
            fmt.Print("Nh·∫≠p ID m√≥n c·∫ßn x√≥a: ")
            scanner.Scan()
            id := scanner.Text()
            DeleteItem(&menu, id)

        case "5":
            fmt.Println("üëã Tho√°t ch∆∞∆°ng tr√¨nh.")
            return

        default:
            fmt.Println("‚ùó L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.")
        }

        fmt.Println()
    }
}
